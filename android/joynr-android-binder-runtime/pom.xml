<!--
  #%L
  %%
  Copyright (C) 2019 BMW Car IT GmbH
  %%
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
	   http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  #L%
  -->
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://maven.apache.org/POM/4.0.0"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>io.joynr.android</groupId>
	<artifactId>joynr-android-binder-runtime</artifactId>
	<packaging>jar</packaging>
	<name>${project.groupId}:${project.artifactId}</name>

	<parent>
		<groupId>io.joynr</groupId>
		<artifactId>android</artifactId>
		<version>1.25.0</version>
		<relativePath>../pom.xml</relativePath>
	</parent>

	<properties>
		<version.plugin.antrun>1.8</version.plugin.antrun>
		<version.plugin.compiler>3.8.1</version.plugin.compiler>
		<version.gradle>5.4.1</version.gradle>
		<exec.gradle>gradlew</exec.gradle>
	</properties>

	<build>
		<plugins>
			<!-- The artifact must be built by Gradle; therefore the compilation is skipped. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${version.plugin.compiler}</version>
				<configuration>
					<skipMain>true</skipMain>
					<skip>true</skip>
				</configuration>
			</plugin>

			<!-- NOTE the license to be added to the source header files must be
					specifically (redundantly) defined below -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>license-maven-plugin</artifactId>
				<configuration>
					<verbose>false</verbose>
					<addSvnKeyWords>true</addSvnKeyWords>
					<licenseName>apache_v2</licenseName>
					<roots>
						<root>./src/</root>
					</roots>
					<excludes>
						<exclude>main/java/javax/transaction/xa/XAException.java</exclude>
						<exclude>main/java/javax/transaction/xa/XAResource.java</exclude>
						<exclude>main/java/javax/transaction/xa/Xid.java</exclude>
					</excludes>
				</configuration>
			</plugin>


			<!-- Tie the maven phases with the gradle equivalent tasks -->
			<plugin>
				<artifactId>exec-maven-plugin</artifactId>
				<groupId>org.codehaus.mojo</groupId>
				<executions>
					<!-- Match the maven clean phase with the gradle clean -->
					<execution>
						<id>gradle-clean</id>
						<phase>clean</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>${basedir}/${exec.gradle}</executable>
							<arguments>
								<argument>clean</argument>
								<argument>--info</argument>
							</arguments>
						</configuration>
					</execution>

					<!-- Match the maven compile phase with the gradle compile -->
					<execution>
						<id>gradle-build</id>
						<phase>compile</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>${basedir}/${exec.gradle}</executable>
							<arguments>
								<argument>build</argument>
							</arguments>
						</configuration>
					</execution>

				</executions>
			</plugin>

			<!-- Copies the artifact created by Gradle back to the Maven target folder. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
				<version>${version.plugin.antrun}</version>
				<dependencies>
					<dependency>
						<groupId>ant-contrib</groupId>
						<artifactId>ant-contrib</artifactId>
						<version>20020829</version>
					</dependency>
				</dependencies>
				<executions>
					<execution>
						<id>copy-jar</id>
						<phase>package</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<target>
								<copy
									file="${project.basedir}/build/outputs/aar/${project.artifactId}-release.aar"
									overwrite="true" todir="${project.build.directory}" />
							</target>
						</configuration>
					</execution>

					<!-- Change pom packaging type to aar type so that the pom published has aar type-->
					<execution>
						<id>change-packaging-to-aar</id>
						<phase>package</phase>
						<goals>
							<goal>run</goal>
						</goals>

						<configuration>
							<target>
								<exec dir="${basedir}" executable="bash" failonerror="true"
									newenvironment="false">
									<arg value="-c" />
									<arg value="sed -i '0,/jar/s/jar/aar/' pom.xml" />
								</exec>
							</target>
						</configuration>

					</execution>

					<!-- Change pom packaging type back to jar type when user is installing in local maven repo -->
					<execution>
						<id>change-packaging-backto-jar</id>
						<phase>install</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>

							<target>
								<taskdef resource="net/sf/antcontrib/antcontrib.properties" />

								<if>
									<contains string="${env.MAVEN_CMD_LINE_ARGS}"
										substring="install" />
									<then>
										<exec dir="${basedir}" executable="bash" failonerror="true"
											newenvironment="false">
											<arg value="-c" />
											<arg value="sed -i '0,/aar/s/aar/jar/' pom.xml" />
										</exec>
									</then>
								</if>
							</target>

						</configuration>
					</execution>

					<!-- Change pom packaging type back to jar type when deploying-->
					<execution>
						<id>change-packaging-backto-aar-indeploy</id>
						<phase>deploy</phase>
						<goals>
							<goal>run</goal>
						</goals>

						<configuration>
							<target>
								<exec dir="${basedir}" executable="bash" failonerror="true"
									newenvironment="false">
									<arg value="-c" />
									<arg value="sed -i '0,/aar/s/aar/jar/' pom.xml" />
								</exec>
							</target>
						</configuration>

					</execution>

				</executions>
			</plugin>


			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>attach-artifacts</id>
						<phase>package</phase>
						<goals>
							<goal>attach-artifact</goal>
						</goals>
						<configuration>
							<artifacts>
								<artifact>
									<file>target/joynr-android-binder-runtime-release.aar</file>
									<type>aar</type>
								</artifact>
							</artifacts>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<artifactId>maven-javadoc-plugin</artifactId>
				<configuration>
					<!-- exclude because of error: package exists in another module: java.transaction.xa -->
					<sourceFileExcludes>**/javax/**</sourceFileExcludes>
					<sourceFileIncludes>${project.basedir}/build/generated/aidl_source_output_dir/release/**/*.java</sourceFileIncludes>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<!-- These dependencies are a clone of the ones on the build.gradle file.
		 These are just for deployment purpose only, the real dependencies are on the build.gradle file -->
	<dependencies>
		<dependency>
			<groupId>com.google.inject</groupId>
			<artifactId>guice</artifactId>
			<classifier>no_aop</classifier>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>com.google.inject.extensions</groupId>
			<artifactId>guice-assistedinject</artifactId>
			<scope>compile</scope>
			<exclusions>
				<exclusion>
					<groupId>*</groupId>
					<artifactId>guice</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>io.joynr.android.core</groupId>
			<artifactId>libjoynr</artifactId>
			<version>${project.version}</version>
			<scope>compile</scope>
			<exclusions>
				<exclusion>
					<groupId>*</groupId>
					<artifactId>guice</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>io.joynr.android.core</groupId>
			<artifactId>clustercontroller</artifactId>
			<version>${project.version}</version>
			<scope>compile</scope>
			<exclusions>
				<exclusion>
					<groupId>*</groupId>
					<artifactId>guice</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>io.joynr.android.common</groupId>
			<artifactId>guice-integration</artifactId>
			<version>${project.version}</version>
			<scope>compile</scope>
			<exclusions>
				<exclusion>
					<groupId>*</groupId>
					<artifactId>guice</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>io.joynr.android.messaging.mqtt</groupId>
			<artifactId>hivemq-mqtt-client</artifactId>
			<version>${project.version}</version>
			<scope>compile</scope>
			<exclusions>
				<exclusion>
					<groupId>*</groupId>
					<artifactId>guice</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>io.joynr.android</groupId>
			<artifactId>slf4j-android-bindings</artifactId>
			<version>${project.version}</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>com.android.support</groupId>
			<artifactId>support-annotations</artifactId>
			<version>28.0.0</version>
			<scope>compile</scope>
		</dependency>
	</dependencies>

</project>

