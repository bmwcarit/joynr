<!--
  #%L
  %%
  Copyright (C) 2019 BMW Car IT GmbH
  %%
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
	   http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  #L%
  -->
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://maven.apache.org/POM/4.0.0"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>io.joynr.android</groupId>
	<artifactId>libjoynr-android-websocket-runtime</artifactId>
	<packaging>jar</packaging>
	<name>${project.groupId}:${project.artifactId}</name>

	<parent>
		<groupId>io.joynr</groupId>
		<artifactId>android</artifactId>
		<version>1.25.0</version>
		<relativePath>../pom.xml</relativePath>
	</parent>

	<properties>
		<version.plugin.antrun>1.8</version.plugin.antrun>
		<version.plugin.compiler>3.8.1</version.plugin.compiler>
		<version.gradle>5.4.1</version.gradle>
		<exec.gradle>gradlew</exec.gradle>
	</properties>

	<build>
		<plugins>
			<!-- The libjoynr android must be built by Gradle; therefore the compilation is skipped. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${version.plugin.compiler}</version>
				<configuration>
					<skipMain>true</skipMain>
					<skip>true</skip>
				</configuration>
			</plugin>

			<!-- At the moment, deployment is skipped for the android projects, but as we actually want to make this library
				available to the developers, we don't want to skip the deploy phase -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-deploy-plugin</artifactId>
				<configuration>
					<skip>false</skip>
				</configuration>
			</plugin>

			<!-- Tie the maven phases with the gradle equivalent tasks -->
			<plugin>
				<artifactId>exec-maven-plugin</artifactId>
				<groupId>org.codehaus.mojo</groupId>
				<executions>
					<!-- Match the maven clean phase with the gradle clean -->
					<execution>
						<id>gradle-clean</id>
						<phase>clean</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>${basedir}/${exec.gradle}</executable>
							<arguments>
								<argument>clean</argument>
								<argument>--info</argument>
							</arguments>
						</configuration>
					</execution>

					<!-- Match the maven compile phase with the gradle compile -->
					<execution>
						<id>gradle-build</id>
						<phase>compile</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>${basedir}/${exec.gradle}</executable>
							<arguments>
								<argument>build</argument>
							</arguments>
						</configuration>
					</execution>

					<!-- When maven install to the local repo, trigger the gradle to have the
					correct configurations  -->
					<execution>
						<id>gradle-publish-local</id>
						<phase>install</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>${basedir}/${exec.gradle}</executable>
							<arguments>
								<argument>publishToMavenLocal</argument>
								<argument>--info</argument>
							</arguments>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Copies the artifact created by Gradle back to the Maven target folder. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
				<version>${version.plugin.antrun}</version>
				<executions>
					<execution>
						<id>copy-jar</id>
						<phase>package</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<target>
								<copy
									file="${project.basedir}/build/libs/${project.artifactId}-${project.version}.jar"
									overwrite="true" todir="${project.build.directory}" />
							</target>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<!-- These dependencies are a clone of the ones on the build.gradle file.
		 These are just for deployment purpose only, the real dependencies are on the build.gradle file -->
	<dependencies>
		<dependency>
			<groupId>com.google.inject</groupId>
			<artifactId>guice</artifactId>
			<classifier>no_aop</classifier>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>io.joynr.android.core</groupId>
			<artifactId>libjoynr-websocket-runtime</artifactId>
			<version>${project.version}</version>
			<scope>compile</scope>
			<exclusions>
				<exclusion>
					<artifactId>guice</artifactId>
					<groupId>*</groupId>
				</exclusion>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>*</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>io.joynr.android</groupId>
			<artifactId>slf4j-android-bindings</artifactId>
			<version>${project.version}</version>
			<scope>compile</scope>
		</dependency>
	</dependencies>

</project>

