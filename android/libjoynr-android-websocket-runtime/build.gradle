/*
 * #%L
 * %%
 * Copyright (C) 2019 BMW Car IT GmbH
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */

apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: 'maven'

group = 'io.joynr.android'
version = '1.25.0'

buildscript {
    repositories {
        google()
        jcenter()
        mavenLocal()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }

    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.4.2'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        mavenLocal()
        repositories {
            maven {
                url "https://oss.sonatype.org/content/repositories/snapshots/"
            }
        }
    }
}


android {
    compileSdkVersion 28
    buildToolsVersion "29.0.3"

    defaultConfig {
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

}

// INFO When adding or updating dependencies, please also update the dependencies on the pom.xml file
// The dependencies on the pom.xml are needed for the Maven deployment process
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    api 'com.google.inject:guice:4.2.3:no_aop'
    api(group: 'io.joynr.android.core', name: 'libjoynr-websocket-runtime', version: "$version") {
        exclude(module: 'guice')
        exclude(group: 'org.slf4j')
    }
    api "io.joynr.android:slf4j-android-bindings:$version"
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

task copyJarFilesToBuildDir(type: Copy) {
    from('build/intermediates/packaged-classes/release/')
    into('build/libs/')
    include('classes.jar')
    rename('classes.jar', "libjoynr-android-websocket-runtime-${version}.jar")
    outputs.file("libjoynr-android-websocket-runtime-${version}.jar")
    outputs.upToDateWhen { false }
}

build.finalizedBy copyJarFilesToBuildDir

publishing {
    publications {
        jar(MavenPublication) {
            groupId = "$group"
            artifactId = 'libjoynr-android-websocket-runtime'

            artifact androidSourcesJar
            artifact("$buildDir/outputs/aar/${rootProject.name}-release.aar")

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.implementation.allDependencies.withType(ModuleDependency) { dp ->
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', dp.group)
                    dependencyNode.appendNode('artifactId', dp.name)
                    dependencyNode.appendNode('version', dp.version)
                    dependencyNode.appendNode('scope', 'compile')
                    if (dp.group == 'com.google.inject') {
                        dependencyNode.appendNode('classifier', 'no_aop')
                    }

                    if (dp.excludeRules.size() > 0) {
                        def exclusions = dependencyNode.appendNode('exclusions')
                        dp.excludeRules.each { ex ->
                            def exclusion = exclusions.appendNode('exclusion')
                            exclusion.appendNode('groupId', ex.group ?: '*')
                            exclusion.appendNode('artifactId', ex.module ?: '*')
                        }
                    }
                }
            }
        }
    }

}

